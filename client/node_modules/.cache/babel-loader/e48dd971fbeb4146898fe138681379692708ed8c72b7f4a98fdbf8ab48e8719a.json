{"ast":null,"code":"import { headers } from \"./constants\";\nconst baseUrl = process.env.NODE_ENV === \"production\" ? \"https://api.jendoc-wtwr.students.nomoredomainssbs.ru\" : \"http://localhost:3001\";\nexport const handleServerResponse = res => {\n  if (res.ok) {\n    return res.json();\n  } else {\n    return Promise.reject(`Error: ${res.status}`);\n  }\n};\nasync function request(url, options) {\n  const res = await fetch(url, options);\n  return handleServerResponse(res);\n}\nexport const register = _ref => {\n  let {\n    name,\n    avatar,\n    email,\n    password\n  } = _ref;\n  return request(`${baseUrl}/signup`, {\n    method: \"POST\",\n    headers: headers,\n    body: JSON.stringify({\n      name,\n      avatar,\n      email,\n      password\n    })\n  });\n};\nexport const authorize = async (email, password) => {\n  return request(`${baseUrl}/signin`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  }).then(data => {\n    if (data.token) {\n      localStorage.setItem(\"token\", data.token);\n      return data;\n    }\n  });\n};\nexport const getUser = async () => {\n  return request(`${baseUrl}/users/me`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      authorization: `Bearer ${localStorage.getItem(\"token\")}`\n    }\n  }).then(data => {\n    return data;\n  });\n};\nexport const updateUser = async (name, avatar, token) => {\n  return request(`${baseUrl}/users/me`, {\n    method: \"PATCH\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n      authorization: `Bearer ${token}`\n    },\n    body: JSON.stringify({\n      name,\n      avatar\n    })\n  });\n};","map":{"version":3,"names":["headers","baseUrl","process","env","NODE_ENV","handleServerResponse","res","ok","json","Promise","reject","status","request","url","options","fetch","register","name","avatar","email","password","method","body","JSON","stringify","authorize","Accept","then","data","token","localStorage","setItem","getUser","authorization","getItem","updateUser"],"sources":["/Users/soysauce/Desktop/WTWR/client/se_project_react/src/utils/auth.js"],"sourcesContent":["import { headers } from \"./constants\";\n\nconst baseUrl =\n  process.env.NODE_ENV === \"production\"\n    ? \"https://api.jendoc-wtwr.students.nomoredomainssbs.ru\"\n    : \"http://localhost:3001\";\n\nexport const handleServerResponse = (res) => {\n  if (res.ok) {\n    return res.json();\n  } else {\n    return Promise.reject(`Error: ${res.status}`);\n  }\n};\n\nasync function request(url, options) {\n  const res = await fetch(url, options);\n  return handleServerResponse(res);\n}\n\nexport const register = ({ name, avatar, email, password }) => {\n  return request(`${baseUrl}/signup`, {\n    method: \"POST\",\n    headers: headers,\n    body: JSON.stringify({ name, avatar, email, password }),\n  });\n};\n\nexport const authorize = async (email, password) => {\n  return request(`${baseUrl}/signin`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ email, password }),\n  }).then((data) => {\n    if (data.token) {\n      localStorage.setItem(\"token\", data.token);\n      return data;\n    }\n  });\n};\n\nexport const getUser = async () => {\n  return request(`${baseUrl}/users/me`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n    },\n  }).then((data) => {\n    return data;\n  });\n};\n\nexport const updateUser = async (name, avatar, token) => {\n  return request(`${baseUrl}/users/me`, {\n    method: \"PATCH\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n      authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify({ name, avatar }),\n  });\n};\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,aAAa;AAErC,MAAMC,OAAO,GACXC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GACjC,sDAAsD,GACtD,uBAAuB;AAE7B,OAAO,MAAMC,oBAAoB,GAAIC,GAAG,IAAK;EAC3C,IAAIA,GAAG,CAACC,EAAE,EAAE;IACV,OAAOD,GAAG,CAACE,IAAI,EAAE;EACnB,CAAC,MAAM;IACL,OAAOC,OAAO,CAACC,MAAM,CAAE,UAASJ,GAAG,CAACK,MAAO,EAAC,CAAC;EAC/C;AACF,CAAC;AAED,eAAeC,OAAO,CAACC,GAAG,EAAEC,OAAO,EAAE;EACnC,MAAMR,GAAG,GAAG,MAAMS,KAAK,CAACF,GAAG,EAAEC,OAAO,CAAC;EACrC,OAAOT,oBAAoB,CAACC,GAAG,CAAC;AAClC;AAEA,OAAO,MAAMU,QAAQ,GAAG,QAAuC;EAAA,IAAtC;IAAEC,IAAI;IAAEC,MAAM;IAAEC,KAAK;IAAEC;EAAS,CAAC;EACxD,OAAOR,OAAO,CAAE,GAAEX,OAAQ,SAAQ,EAAE;IAClCoB,MAAM,EAAE,MAAM;IACdrB,OAAO,EAAEA,OAAO;IAChBsB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEP,IAAI;MAAEC,MAAM;MAAEC,KAAK;MAAEC;IAAS,CAAC;EACxD,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMK,SAAS,GAAG,OAAON,KAAK,EAAEC,QAAQ,KAAK;EAClD,OAAOR,OAAO,CAAE,GAAEX,OAAQ,SAAQ,EAAE;IAClCoB,MAAM,EAAE,MAAM;IACdrB,OAAO,EAAE;MACP0B,MAAM,EAAE,kBAAkB;MAC1B,cAAc,EAAE;IAClB,CAAC;IACDJ,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEL,KAAK;MAAEC;IAAS,CAAC;EAC1C,CAAC,CAAC,CAACO,IAAI,CAAEC,IAAI,IAAK;IAChB,IAAIA,IAAI,CAACC,KAAK,EAAE;MACdC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,IAAI,CAACC,KAAK,CAAC;MACzC,OAAOD,IAAI;IACb;EACF,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMI,OAAO,GAAG,YAAY;EACjC,OAAOpB,OAAO,CAAE,GAAEX,OAAQ,WAAU,EAAE;IACpCoB,MAAM,EAAE,KAAK;IACbrB,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClCiC,aAAa,EAAG,UAASH,YAAY,CAACI,OAAO,CAAC,OAAO,CAAE;IACzD;EACF,CAAC,CAAC,CAACP,IAAI,CAAEC,IAAI,IAAK;IAChB,OAAOA,IAAI;EACb,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMO,UAAU,GAAG,OAAOlB,IAAI,EAAEC,MAAM,EAAEW,KAAK,KAAK;EACvD,OAAOjB,OAAO,CAAE,GAAEX,OAAQ,WAAU,EAAE;IACpCoB,MAAM,EAAE,OAAO;IACfrB,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClC0B,MAAM,EAAE,kBAAkB;MAC1BO,aAAa,EAAG,UAASJ,KAAM;IACjC,CAAC;IACDP,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEP,IAAI;MAAEC;IAAO,CAAC;EACvC,CAAC,CAAC;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}